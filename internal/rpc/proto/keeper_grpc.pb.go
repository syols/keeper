// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: proto/keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	Registration(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	Authorization(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	AccessTokenRequest(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	AddRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	SyncRecord(ctx context.Context, in *Token, opts ...grpc.CallOption) (Keeper_SyncRecordClient, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) Registration(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/internal.rpc.proto.Keeper/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) Authorization(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/internal.rpc.proto.Keeper/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AccessTokenRequest(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/internal.rpc.proto.Keeper/AccessTokenRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/internal.rpc.proto.Keeper/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SyncRecord(ctx context.Context, in *Token, opts ...grpc.CallOption) (Keeper_SyncRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[0], "/internal.rpc.proto.Keeper/SyncRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperSyncRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keeper_SyncRecordClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type keeperSyncRecordClient struct {
	grpc.ClientStream
}

func (x *keeperSyncRecordClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility
type KeeperServer interface {
	Registration(context.Context, *SignInRequest) (*SignInResponse, error)
	Authorization(context.Context, *SignInRequest) (*SignInResponse, error)
	AccessTokenRequest(context.Context, *Token) (*Token, error)
	AddRecord(context.Context, *Record) (*Record, error)
	SyncRecord(*Token, Keeper_SyncRecordServer) error
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedKeeperServer struct {
}

func (UnimplementedKeeperServer) Registration(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedKeeperServer) Authorization(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedKeeperServer) AccessTokenRequest(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessTokenRequest not implemented")
}
func (UnimplementedKeeperServer) AddRecord(context.Context, *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedKeeperServer) SyncRecord(*Token, Keeper_SyncRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncRecord not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.proto.Keeper/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).Registration(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.proto.Keeper/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).Authorization(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AccessTokenRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AccessTokenRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.proto.Keeper/AccessTokenRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AccessTokenRequest(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.proto.Keeper/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SyncRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Token)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServer).SyncRecord(m, &keeperSyncRecordServer{stream})
}

type Keeper_SyncRecordServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type keeperSyncRecordServer struct {
	grpc.ServerStream
}

func (x *keeperSyncRecordServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.rpc.proto.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _Keeper_Registration_Handler,
		},
		{
			MethodName: "Authorization",
			Handler:    _Keeper_Authorization_Handler,
		},
		{
			MethodName: "AccessTokenRequest",
			Handler:    _Keeper_AccessTokenRequest_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _Keeper_AddRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncRecord",
			Handler:       _Keeper_SyncRecord_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/keeper.proto",
}
